#BlueJ class context
comment0.target=MixedNumber
comment0.text=\n\n\n\ This\ class\ represents\ a\ mixed\ number\ which\ consist\ of\ sign\ (+\ or\ -),integer\ \n\ and\ fraction\ parts\ of\ a\ number.\ Example\:\ -10\ 3/5,\ 0\ 1/2,\ -0\ 3/4,\ 4\ 5/6\n\ \n\ Requirements\:\n\ 1.\ Implement\ interfaces\:\ MixedNumberInterface\ and\ Comparable\ (i.e.\ compareTo())\n\ 2.\ Implement\ methods\ equals()\ and\ toString()\ from\ class\ Object\n\ 3.\ Must\ work\ for\ both\ positive\ and\ negative\ mixed\ numbers\n\ \ \ \ Example\:\ -3\ 5/6,\ -3\ -5/-6,\ 0\ -4/5,\ 0\ 4/-5\n\ \ \ \ \ \ \ \ \ \ \ \ \ are\ valid\ mixed\ numbers,\ all\ with\ sign\ '-'\n\ \ \ \ \ \ \ \ \ \ \ \ \ -3\ -5/6,\ 3\ -4/5,\ 3\ 4/-5\ are\ invalid\ mixed\ numbers\n\ 4.\ Must\ reduce\ to\ mixed\ number\ to\ lowest\ term,\ e.g.\ -3\ 14/4\ -->\ -6\ 1/2\ \n\ 5.\ Must\ reduce\ result\ mixed\ number\ to\ lowest\ term\ for\ operations\ \n\ \ \ \ add,\ subtract,\ multiply\ and\ divide,\ e.g.\ see\ test\ cases\n\ 6.\ For\ input\ such\ as\ -2\ -3/-10,\ \ 2\ -3/-10\ and\ 0\ -4/-5\ must\ convert\ them\ to\ \n\ \ \ \ -2\ 3/10,\ 2\ 3/10\ and\ 0\ 4/5\ respectively\ \n\ 7.\ Must\ throw\ only\ Project1Exception\ in\ case\ of\ errors\ or\ invalid\ mixed\ numbers\n\ 8.\ Must\ not\ add\ new\ or\ modify\ existing\ data\ fields\n\ 9.\ Must\ not\ add\ new\ public\ methods\n\ 10.May\ add\ private\ methods\n\n\ Hints\:\n\n\ 1.\ You\ need\ to\ downcast\ reference\ parameter\ MixedNumberInterface\ to\ \n\ \ \ \ MixedNumber\ if\ you\ want\ to\ use\ it\ as\ MixedNumber.\ \n\ \ \ \ See\ add,\ subtract,\ multiply\ and\ divide\ methods\n\n\ 2.\ You\ need\ to\ downcast\ reference\ parameter\ FractionInterface\ to\ Fraction\ if\ \ \n\ \ \ \ you\ want\ to\ use\ it\ as\ Fraction.\ \n\n\ 3.\ Use\ "this"\ to\ access\ this\ object\ if\ it\ is\ needed\n\n\ 4.\ Use\ given\ Fraction\ class\ to\ simplify\ MixedNumber\ class\ implementations\n\ \ \ \ 4.1\ Fraction\ class\ always\ reduce\ fraction\ object\ to\ lowest\ term.\ \n\ \ \ \ \ \ \ \ 12/8\ -->\ 3/2\n\ \ \ \ 4.2\ Fraction\ class\ always\ set\ denominator\ to\ >\ 0\ and\ \n\ \ \ \ \ \ \ \ numerator\ to\ +/-\ values.\ \ Example\:\ 3/-2\ or\ -3/2\ -->\ -3/2\n\ \ \ \ 4.3\ Look\ at\ Fraction\ interface\ for\ operations\n\ \ \ \ 4.4\ Additional\ Operations\:\n\n\ \ \ \ \ \ \ \ public\ Fraction()\n\ \ \ \ \ \ \ \ public\ Fraction(int\ num,\ int\ den)\n\ \ \ \ \ \ \ \ public\ boolean\ equals(Object\ other)\n\ \ \ \ \ \ \ \ public\ int\ compareTo(Fraction\ other)\n\ \ \ \ \ \ \ \ public\ String\ toString()\ \ \ \ \n\n
comment1.params=
comment1.target=MixedNumber()
comment10.params=multiplier
comment10.target=MixedNumberInterface\ multiplyMixedNumber(MixedNumberInterface)
comment11.params=divisor
comment11.target=MixedNumberInterface\ divideMixedNumber(MixedNumberInterface)
comment12.params=other
comment12.target=boolean\ equals(java.lang.Object)
comment13.params=other
comment13.target=int\ compareTo(MixedNumber)
comment14.params=
comment14.target=java.lang.String\ toString()
comment15.params=
comment15.target=void\ reduceToLowestForm()
comment16.params=
comment16.target=FractionInterface\ getFractionalEquivalent()
comment17.params=
comment17.target=void\ adjustSigns()
comment2.params=integerPart\ fractionNumerator\ fractionDenominator
comment2.target=MixedNumber(int,\ int,\ int)
comment3.params=integerPart\ fractionPart
comment3.target=MixedNumber(int,\ FractionInterface)
comment4.params=integerPart\ fractionPart
comment4.target=void\ setMixedNumber(int,\ FractionInterface)
comment5.params=integerPart\ fractionNumerator\ fractionDenominator
comment5.target=void\ setMixedNumber(int,\ int,\ int)
comment6.params=
comment6.target=int\ getIntegerPart()
comment7.params=
comment7.target=FractionInterface\ getFractionPart()
comment8.params=operand
comment8.target=MixedNumberInterface\ addMixedNumber(MixedNumberInterface)
comment9.params=operand
comment9.target=MixedNumberInterface\ subtractMixedNumber(MixedNumberInterface)
numComments=18
